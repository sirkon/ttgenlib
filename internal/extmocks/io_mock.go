// Code generated by pamgen version (devel). DO NOT EDIT.

package extmocks

import (
	"github.com/golang/mock/gomock"
	"github.com/sirkon/deepequal"
	"reflect"
)

// ReaderMock interface io.Reader mock
type ReaderMock struct {
	ctrl     *gomock.Controller
	recorder *ReaderMockRecorder
}

// ReaderMockRecorder records expected calls of io.Reader
type ReaderMockRecorder struct {
	mock *ReaderMock
}

// NewReaderMock creates ReaderMock instance
func NewReaderMock(ctrl *gomock.Controller) *ReaderMock {
	mock := &ReaderMock{
		ctrl: ctrl,
	}
	mock.recorder = &ReaderMockRecorder{mock: mock}
	return mock
}

// EXPECT returns expected calls recorder
func (m *ReaderMock) EXPECT() *ReaderMockRecorder {
	return m.recorder
}

// Read method to implement io.Reader
func (m *ReaderMock) Read(p []byte) (n int, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	n, _ = ret[0].(int)
	err, _ = ret[1].(error)
	return n, err
}

// Read register expected call of method io.Reader.Read
func (mr *ReaderMockRecorder) Read(p any) *gomock.Call {
	if p != nil {
		if _, ok := p.(gomock.Matcher); !ok {
			p = deepequal.NewEqMatcher(p)
		}
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*ReaderMock)(nil).Read), p)
}

// ReadWhatever records a call with arbitrary arguments.
func (mr *ReaderMockRecorder) ReadWhatever() *gomock.Call {
	return mr.Read(gomock.Any())
}

// WriterMock interface io.Writer mock
type WriterMock struct {
	ctrl     *gomock.Controller
	recorder *WriterMockRecorder
}

// WriterMockRecorder records expected calls of io.Writer
type WriterMockRecorder struct {
	mock *WriterMock
}

// NewWriterMock creates WriterMock instance
func NewWriterMock(ctrl *gomock.Controller) *WriterMock {
	mock := &WriterMock{
		ctrl: ctrl,
	}
	mock.recorder = &WriterMockRecorder{mock: mock}
	return mock
}

// EXPECT returns expected calls recorder
func (m *WriterMock) EXPECT() *WriterMockRecorder {
	return m.recorder
}

// Write method to implement io.Writer
func (m *WriterMock) Write(p []byte) (n int, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	n, _ = ret[0].(int)
	err, _ = ret[1].(error)
	return n, err
}

// Write register expected call of method io.Writer.Write
func (mr *WriterMockRecorder) Write(p any) *gomock.Call {
	if p != nil {
		if _, ok := p.(gomock.Matcher); !ok {
			p = deepequal.NewEqMatcher(p)
		}
	}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*WriterMock)(nil).Write), p)
}

// WriteWhatever records a call with arbitrary arguments.
func (mr *WriterMockRecorder) WriteWhatever() *gomock.Call {
	return mr.Write(gomock.Any())
}
